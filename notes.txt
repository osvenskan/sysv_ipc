Check for memory leaks -- use unittest 

Move page size stuff to prober



check size of shm segment -- it is a size_t. Is it cast correctly in all cases? 

Tackle solaris compile problems.

Tackle Python < 2.5 problems. Best solution might be to tell them to use SHM instead.


Make sure prober gets the same compile options as the module (e.g. -D_POSIX_C_SOURCE)

review all instances of "goto error_return"

Maybe include errno in all error msgs?


   

FInd a way to get max semaphore value on *all* platforms. (See FIXME in prober.py)
http://groups.google.com/group/comp.lang.c/browse_thread/thread/14a1cdbfb111f4eb


http://linux.die.net/man/2/shmat says that "The segment will automatically be detached at process exit." Does that imply that n_attach will go to zero? OS X and FreeBSD make no such promise, but they don't explicitly deny it either.

Auto-generate an unused key if the caller passes None for the key.

Need to expose SHM_DEST & SHM_LOCKED as attributes (see http://linux.die.net/man/2/shmctl). Since these appear in the mode, you'll have to stop trimming stuff off of the mode bits on shared memory creation.


Semtimedop support -- 
- "semtimedop() first appeared in Linux 2.5.52, and was subsequently backported into kernel 2.4.22."
- Seems like Sun supports semtimedop


Do op_flags need to be saved in the SysVSemaphore struct? What about booleans for block and undo  instead, and declaring the op_flags struct only locally as needed? 
Answer: It's true; they don't need to be saved in the struct as opflags. They (IPC_NOWAIT and SEM_UNDO) could be represented by boolean ints and you'd only have to fool around with IPC_NOWAIT and SEM_UNDO when actually calling semop(). I'm not sure if it would make the code any more readable though.


