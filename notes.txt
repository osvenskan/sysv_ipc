SYSV_IPC

-- next done
- moved page_size to prober
- added maintainer to classifiers in setup.py
- add a newline to the end of probe_results.h to avoid gcc warning
- Add more metadata to setup.py 
- add an md5sum for the tarball; can be generated by MakeTarball.py
- fixed bug of errors not appearing in module dict
- rename errors -- they're called SystemVIpc* where they should be SysVIpc*. 
- bug in 0.2 shared mem init or documentation -- shared mem size does *not* always default to 0. It always defaults to PAGE_SIZE. 
- add a warning about potential race condition when using IPC_CREAT when creating a memory segment 



-- next to do

- review all instances of "goto error_return"






- module init function handles errors correctly?

- check size of shm segment -- it is a size_t. Is it cast correctly in all cases? 

- Tackle solaris compile problems.

- Tackle Python < 2.5 problems. Best solution might be to tell them to use SHM instead.

Find a better way to ensure all prober .c files get the same compile options (e.g. #define _XOPEN_SOURCE 600) as the main module. 
   

FInd a way to get max semaphore value on *all* platforms. (See FIXME in prober.py)
http://groups.google.com/group/comp.lang.c/browse_thread/thread/14a1cdbfb111f4eb


http://linux.die.net/man/2/shmat says that "The segment will automatically be detached at process exit." Does that imply that n_attach will go to zero? OS X and FreeBSD make no such promise, but they don't explicitly deny it either.

Auto-generate an unused key if the caller passes None for the key.

Need to expose SHM_DEST & SHM_LOCKED as attributes (see http://linux.die.net/man/2/shmctl). Since these appear in the mode, you'll have to stop trimming stuff off of the mode bits on shared memory creation.


Semtimedop support -- 
- "semtimedop() first appeared in Linux 2.5.52, and was subsequently backported into kernel 2.4.22."
- Seems like Sun supports semtimedop


Do op_flags need to be saved in the SysVSemaphore struct? What about booleans for block and undo  instead, and declaring the op_flags struct only locally as needed? 
Answer: It's true; they don't need to be saved in the struct as opflags. They (IPC_NOWAIT and SEM_UNDO) could be represented by boolean ints and you'd only have to fool around with IPC_NOWAIT and SEM_UNDO when actually calling semop(). I'm not sure if it would make the code any more readable though.


